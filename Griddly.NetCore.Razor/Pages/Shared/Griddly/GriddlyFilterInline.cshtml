@*
    * GriddlyFilter inline renderer
    * http://griddly.com
    * Copyright 2013-2025 Chris Hynes and Data Research Group, Inc.
    * Licensed under MIT (https://github.com/programcsharp/griddly/blob/master/LICENSE)
    *
    * WARNING: Don't edit this file -- it'll be overwitten when you upgrade.
    *          Use the static properties on GriddlySettings to make config changes.
    *
*@
@using Griddly.Mvc
@using Microsoft.AspNetCore.Html;
@model GriddlySettings
@{
    var css = Model.Css;

    Func<(GriddlyFilterList filter, SelectListItem item, bool isGrouped), IHtmlContent> RenderListItem = @<text>@{
            var className = (item.item.Selected ? "griddly-filter-selected" : null) + " " + (item.isGrouped ? "griddly-list-group" : null);
            if (css.Is(CssFramework.Bootstrap3))
            {
                @Html.Raw("<li class=\"" + className + "\">")
            }

            <a href="javascript:;" class="@(css.Is(CssFramework.Bootstrap4, CssFramework.Bootstrap5) ? "dropdown-item " + className : null)">
                <input name="@item.filter.Field" type="@(item.filter.IsMultiple ? "checkbox" : "radio")" checked="@(item.item.Selected)" value="@item.item.Value" />
                <i class="@(item.filter.IsMultiple ? css.Icons.ListMultipleSelected : css.Icons.ListSingleSelected) griddly-filter-selected-indicator"></i>
                @item.item.Text
            </a>

            if (css.Is(CssFramework.Bootstrap3))
            {
                @Html.Raw("</li>")
            }
    }</text>;

Func<(GriddlyFilterList filterList, SelectListItemGroup group), IHtmlContent> ListGroupHeader = @<text>@{
        var tag = css.Is(CssFramework.Bootstrap4, CssFramework.Bootstrap5) ? "div" : "li";
        var className = item.filterList.IsMultiple && item.group.Items.All(x => x.Selected) ? "griddly-filter-selected" : null;

        @Html.Raw("<" + tag + " class=\"griddly-list-group-header " + className + "\">")
        if (item.filterList.IsMultiple)
        {
            <a href="javascript:;" tabindex="-1">
                <b>@item.group.Text</b>
                <i class="@(css.Icons.ListMultipleSelected) griddly-filter-selected-indicator"></i>
            </a>
        }
        else
        {
            <b>@item.group.Text</b>
        }
        @Html.Raw("</" + tag + ">")
}</text>;

Func<Func<dynamic, IHtmlContent>, IHtmlContent> DropdownMenu = @<text>@{
        var css = Model.Css;
        if (css.Is(CssFramework.Bootstrap4, CssFramework.Bootstrap5))
        {
            <div class="dropdown-menu">
                @item(null)
            </div>
        }
        else
        {
            <ul class="dropdown-menu" role="menu">
                @item(null)
            </ul>
        }
}</text>;

Func<(Func<dynamic, IHtmlContent> content, bool prepend), IHtmlContent> InputGroupAddon = @<text>@{
        var css = Model.Css;
        if (css.Is(CssFramework.Bootstrap4, CssFramework.Bootstrap5))
        {
            <div class="input-group-@(item.prepend?"prepend":"append")"><span class="input-group-text">@item.content(null)</span></div>
        }
        else
        {
            <span class="input-group-addon">@item.content(null)</span>
        }
}</text>;
}
@for (int i = 0; i < Model.Columns.Count; i++)
{
    GriddlyColumn column = Model.Columns[i];

    <td class="@column.ClassName @(!column.Visible ? "column-hidden" : null) @(column.DefaultSort != null ? (column.DefaultSort == SortDirection.Descending ? "sorted_d" : "sorted_a") : null)">
        @if (column.Filter != null)
        {
            GriddlyFilter filter = column.Filter;
            GriddlyFilterBox filterBox = filter as GriddlyFilterBox;
            GriddlyFilterRange filterRange = filter as GriddlyFilterRange;
            GriddlyFilterList filterList = filter as GriddlyFilterList;
            GriddlyHtmlFilter filterHtml = filter as GriddlyHtmlFilter;

            <div class="btn-group griddly-filter @(filterBox != null ? "griddly-filter-box" : null) @(filterRange != null ? "griddly-filter-range" : null) @(filterList != null ? "griddly-filter-list" : null) @(filterHtml != null ? "griddly-html-filter" : null)"
                 data-filter-name="@filter.CaptionInline" data-filter-name-plural="@filter.CaptionPlural"
                 data-filter-datatype="@filter.DataType.ToString()"
                 @Html.AttributeIf("data-griddly-filter-ismultiple", filterList != null, x => filterList.IsMultiple.ToString().ToLower())
                 @Html.AttributeIf("data-griddly-filter-isnoneall", filterList != null, x => filterList.IsNoneAll.ToString().ToLower())
                 @Html.AttributeIf("data-griddly-filter-isnullable", filterList != null, x => filterList.IsNullable.ToString().ToLower())
                 @Html.AttributeIf("data-griddly-filter-displayitemcount", filterList != null, x => filterList.DisplayItemCount)>
                @{
                    object defaultValue = this.GetGriddlyParameter(filter.Field);
                    object defaultValueEnd = filterRange != null ? this.GetGriddlyParameter(filterRange.FieldEnd) : null;
                }
                @if (filterHtml != null)
                {
                    @filterHtml.HtmlTemplate(new GriddlyHtmlFilterModel(filterHtml, defaultValue))
                }
                else
                {
                    <a class="btn btn-xs btn-link @(filterList == null || filterList.Items.Count > 0 ? "filter-trigger" : "disabled")" href="javascript:;">
                        <span class="griddly-filter-display @(defaultValue == null ? "griddly-filter-display-empty" : null)">
                            @if (filterBox != null)
                            {
                                if (defaultValue != null)
                                {
                                    if (filter.DataType == FilterDataType.String)
                                    {
                                        <text>Contains "@filter.GetFormattedValue(defaultValue)"</text>
                                    }
                                    else
                                    {
                                        @filter.GetFormattedValue(defaultValue)
                                    }
                                }
                                else
                                {
                                    <text>Any @filter.CaptionInline</text>
                                }
                            }
                            else if (filterRange != null)
                            {
                                if (defaultValue != null && defaultValueEnd != null)
                                {
                                    <text>@filter.GetFormattedValue(defaultValue) - @filter.GetFormattedValue(defaultValueEnd)</text>
                                }
                                else if (defaultValue != null)
                                {
                                    <text>@(filter.DataType == FilterDataType.Date ? "After" : ">=") @filter.GetFormattedValue(defaultValue)</text>
                                }
                                else if (defaultValueEnd != null)
                                {
                                    <text>@(filter.DataType == FilterDataType.Date ? "Before" : "<=") @filter.GetFormattedValue(defaultValueEnd)</text>
                                }
                                else
                                {
                                    <text>All @filter.CaptionPlural</text>
                                }
                            }
                            else if (filterList != null)
                            {
                                filterList.SetSelectedItems(defaultValue);
                                int allCount = filterList.SelectableItems.Count;
                                int selectedCount = filterList.SelectableItems.Count(x => x.Selected);
                                if (selectedCount == allCount || (selectedCount == 0 && filterList.IsNoneAll))
                                {
                                    <text>@(allCount == 2 && !filterList.IsNullable ? "Both " : "All ") @filter.CaptionPlural</text>
                                }
                                else if (selectedCount > filterList.DisplayItemCount)
                                {
                                    <text>@(selectedCount) @filter.CaptionPlural</text>
                                }
                                else if (selectedCount > 0 && selectedCount <= filterList.DisplayItemCount)
                                {
                                    @(string.Join(", ", filterList.SelectableItems.Where(x => x.Selected).Take(Math.Min(selectedCount, filterList.DisplayItemCount)).Select(x => x.Text)))
                                }
                                else
                                {
                                    <text>No @filter.CaptionPlural</text>
                                }
                            }
                        </span>
                        @if (filterList == null || filterList.Items.Count > 0)
                        {
                            <span class="@(css.InlineFilterUseFilterClass ? css.Icons.Filter : css.Icons.CaretDown)"></span>
                        }
                    </a>
                    <div class="filter-content">
                        @if (filterBox != null)
                        {
                            <div class="input-group input-group-sm">

                                @if (filter.DataType == FilterDataType.Currency)
                                {
                                    @InputGroupAddon((@<text>@Griddly.Mvc.GriddlyExtensions.CurrencySymbol</text>, true))
                                }
                                else if (filter.DataType == FilterDataType.Date)
                                {
                                    @InputGroupAddon((@<i class="@(css.Icons.Calendar)"></i>, true))
                                }

                                <input autocomplete="off" class="form-control" name="@filter.Field" type="text" value="@filter.GetEditValue(defaultValue)"
                                       data-griddly-filter-data-type="@filter.DataType" />
                                @*@if (filter.DataType == FilterDataType.Percent)
                                    {
                                        <span class="input-group-addon">%</span>
                                    }*@
                                <span class="@(css.Is(CssFramework.Bootstrap4, CssFramework.Bootstrap5) ? "input-group-append" : "input-group-btn")">
                                    <a class="@css.ButtonDefault griddly-filter-clear" href="javascript:;" tabindex="-1"><i class="@(css.Icons.Remove)"></i></a>
                                </span>
                            </div>
                        }
                        else if (filterRange != null)
                        {
                            <div class="input-group input-group-sm">
                                @if (filter.DataType == FilterDataType.Currency)
                                {
                                    @InputGroupAddon((@<text>@Griddly.Mvc.GriddlyExtensions.CurrencySymbol</text>, true))
                                }
                                else if (filter.DataType == FilterDataType.Date)
                                {
                                    @InputGroupAddon((@<i class="@(css.Icons.Calendar)"></i>, true))
                                }
                                <input autocomplete="off" class="form-control" name="@filter.Field" type="text" value="@filter.GetEditValue(defaultValue)"
                                       data-griddly-filter-data-type="@filter.DataType" placeholder="Range Start" />
                                @*@if (filter.DataType == FilterDataType.Percent)
                                    {
                                        <span class="input-group-addon">%</span>
                                    }*@
                                <span class="@(css.Is(CssFramework.Bootstrap4, CssFramework.Bootstrap5) ? "input-group-append" : "input-group-btn")">
                                    <a class="@css.ButtonDefault griddly-filter-clear" href="javascript:;" tabindex="-1"><i class="@(css.Icons.Remove)"></i></a>
                                </span>
                            </div>
                            <div style="text-align:center" class="filter-range-to-text">to</div>
                            <div class="input-group input-group-sm">
                                @if (filter.DataType == FilterDataType.Currency)
                                {
                                    @InputGroupAddon((@<text>@Griddly.Mvc.GriddlyExtensions.CurrencySymbol</text>, true))
                                }
                                else if (filter.DataType == FilterDataType.Date)
                                {
                                    @InputGroupAddon((@<i class="@(css.Icons.Calendar)"></i>, true))
                                }
                                <input autocomplete="off" class="form-control" name="@filterRange.FieldEnd" type="text" value="@filter.GetEditValue(defaultValueEnd)"
                                       data-griddly-filter-data-type="@filter.DataType" placeholder="Range End" />
                                @*@if (filter.DataType == FilterDataType.Percent)
                                    {
                                        <span class="input-group-addon">%</span>
                                    }*@
                                <span class="@(css.Is(CssFramework.Bootstrap4, CssFramework.Bootstrap5) ? "input-group-append" : "input-group-btn")">
                                    <a class="@css.ButtonDefault griddly-filter-clear" href="javascript:;" tabindex="-1"><i class="@(css.Icons.Remove)"></i></a>
                                </span>
                            </div>
                        }
                        else if (filterList != null)
                        {
                            if (filterList.IsMultiple)
                            {
                                <div class="input-group griddly-filter-buttons">
                                    <span class="input-group-btn @(css.Is(CssFramework.Bootstrap4, CssFramework.Bootstrap5) ? "w-50" : null)">
                                        <a class="@css.ButtonDefault griddly-select-all" href="javascript:;"><i class="@(css.Icons.Check)"></i> Select All</a>
                                    </span>
                                    <span class="input-group-btn @(css.Is(CssFramework.Bootstrap4, CssFramework.Bootstrap5) ? "w-50" : null)">
                                        <a class="@css.ButtonDefault griddly-clear" href="javascript:;"><i class="@(css.Icons.Clear)"></i> Clear</a>
                                    </span>
                                </div>
                            }
                            @DropdownMenu(@<text>
                                @foreach (SelectListItem sli in filterList.Items)
                                {
                                    SelectListItemGroup group = sli as SelectListItemGroup;

                                    if (group != null)
                                    {
                                        @ListGroupHeader((filterList, group))

                                        foreach (SelectListItem childItem in group.Items)
                                        {
                                            @RenderListItem((filterList, childItem, true))
                                        }
                                    }
                                    else
                                    {
                                        @RenderListItem((filterList, sli, false))
                                    }
                                }
                            </text>)
                        }
                        <button class="btn btn-sm btn-primary griddly-inline-filter-update" style="width:100%"><i class="@css.Icons.ListMultipleSelected"></i></button>
                    </div>
                }
            </div>
        }
    </td>
}